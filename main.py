import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ConversationHandler,
    ContextTypes
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

from flask import Flask
from threading import Thread

app_flask = Flask('')

@app_flask.route('/')
def home():
    return "Bot dzia≈Ça!"

def run():
    app_flask.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# TOKEN i Google Sheets konfiguracja
TOKEN = '7799950814:AAFbnyKM6qLOaJWNkgKBXysaEXTjsmRJtIc'
SCOPES = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
CREDS_FILE = 'credentials.json'
SPREADSHEET_ID = '1fI0z9PJfvqs_oQsgw1KQRCeWpuROnOt6rim1i991UCY'
SHEET_KANDYDA = 'Kandydaci'
SHEET_OFERTE = 'Oferty'

# Google Sheets inicjalizacja
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPES)
client = gspread.authorize(creds)
spreadsheet = client.open_by_key(SPREADSHEET_ID)
worksheet_candidates = spreadsheet.worksheet(SHEET_KANDYDA)
worksheet_offers = spreadsheet.worksheet(SHEET_OFERTE)

# Stany rozmowy
NAME, PHONE, AGE, GENDER, LOCATION, ARRIVAL_TIME, CITY, RELOCATION = range(8)

logging.basicConfig(level=logging.INFO)

age_keyboard = [[InlineKeyboardButton("18-40", callback_data='age_18-40'),
                 InlineKeyboardButton("40-50", callback_data='age_40-50'),
                 InlineKeyboardButton("50-60", callback_data='age_50-60')]]

gender_keyboard = [[InlineKeyboardButton("–ñ—ñ–Ω–∫–∞", callback_data='gender_–ñ—ñ–Ω–∫–∞'),
                    InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ–∫", callback_data='gender_–ß–æ–ª–æ–≤—ñ–∫'),
                    InlineKeyboardButton("–°—ñ–º–µ–π–Ω–∞ –ø–∞—Ä–∞", callback_data='gender_–ø–∞—Ä–∞')]]

location_keyboard = [[InlineKeyboardButton("–í –ü–æ–ª—å—â—ñ", callback_data='location_–í –ü–æ–ª—å—â—ñ'),
                      InlineKeyboardButton("–õ–∏—à–µ –ø–ª–∞–Ω—É—é –ø—Ä–∏—ó—Ö–∞—Ç–∏", callback_data='location_–õ–∏—à–µ –ø–ª–∞–Ω—É—é –ø—Ä–∏—ó—Ö–∞—Ç–∏')]]

arrival_time_keyboard = [[InlineKeyboardButton("–Ø–∫–Ω–∞–π—à–≤–∏–¥—à–µ", callback_data='arrival_—è–∫–Ω–∞–π—à–≤–∏–¥—à–µ'),
                          InlineKeyboardButton("—á–µ—Ä–µ–∑ —Ç–∏–∂–¥–µ–Ω—å", callback_data='arrival_—Ç–∏–∂–¥–µ–Ω—å'),
                          InlineKeyboardButton("–Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å", callback_data='arrival_–º—ñ—Å—è—Ü—å')]]

relocation_keyboard = [[InlineKeyboardButton("–¢–ê–ö", callback_data='relocation_TAK'),
                         InlineKeyboardButton("–ù–Ü", callback_data='relocation_N–Ü')]]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ú–µ–Ω–µ –∑–≤–∞—Ç–∏ JOBEX, —è —Ç–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π —Ä–µ–∫—Ä—É—Ç–µ—Ä, –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–∫—Ä–∞—â—É —Ä–æ–±–æ—Ç—É –≤ –ü–æ–ª—å—â—ñ!")
    await update.message.reply_text("–î–∞–≤–∞–π –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å!")
    await update.message.reply_text("–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    context.user_data['name'] = name
    contact_keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]],
        one_time_keyboard=True, resize_keyboard=True
    )
    await update.message.reply_text(f"{name}, –ø–æ–¥—ñ–ª–∏—Å—å –∑—ñ –º–Ω–æ—é –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± –±—É—Ç–∏ –Ω–∞ –∑–≤'—è–∑–∫—É –∑—ñ –º–Ω–æ—é:", reply_markup=contact_keyboard)
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.contact.phone_number if update.message.contact else update.message.text
    await update.message.reply_text("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?", reply_markup=InlineKeyboardMarkup(age_keyboard))
    return AGE

async def process_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith('age_'):
        age = data.split('_')[1]
        context.user_data['age'] = age
        await query.message.reply_text(f"–¢–≤—ñ–π –≤—ñ–∫: {age}")
        await query.message.reply_text("–î–ª—è –∫–æ–≥–æ —Ç–∏ —à—É–∫–∞—î—à —Ä–æ–±–æ—Ç—É?", reply_markup=InlineKeyboardMarkup(gender_keyboard))
        return GENDER

    elif data.startswith('gender_'):
        gender = data.split('_')[1]
        context.user_data['gender'] = gender
        await query.message.reply_text(f"–°—Ç–∞—Ç—å: {gender}")
        await query.message.reply_text("–î–µ —Ç–∏ –∑–∞—Ä–∞–∑ –∑–Ω–∞—Ö–æ–¥–∏—à—Å—è?", reply_markup=InlineKeyboardMarkup(location_keyboard))
        return LOCATION

    elif data.startswith('location_'):
        location = data.replace('location_', '')
        context.user_data['location'] = location
        await query.message.reply_text(f"–õ–æ–∫–∞—Ü—ñ—è: {location}")
        if location == '–í –ü–æ–ª—å—â—ñ':
            await query.message.reply_text("–í —è–∫–æ–º—É –º—ñ—Å—Ç—ñ —Ç–∏ –∑–∞—Ä–∞–∑ –ø—Ä–æ–∂–∏–≤–∞—î—à?")
            return CITY
        else:
            await query.message.reply_text("–ö–æ–ª–∏ —Ç–∏ –ø–ª–∞–Ω—É—î—à –ø—Ä–∏—ó—Ö–∞—Ç–∏?", reply_markup=InlineKeyboardMarkup(arrival_time_keyboard))
            return ARRIVAL_TIME

    elif data.startswith('arrival_'):
        arrival = data.split('_')[1]
        context.user_data['arrival_time'] = arrival
        await query.message.reply_text(f"–ß–∞—Å –ø—Ä–∏—ó–∑–¥—É: {arrival}")
        if arrival == '–º—ñ—Å—è—Ü—å':
            await query.message.reply_text("–ó–≤ º—è–∂–µ–º–æ—Å—å –ø—ñ–∑–Ω—ñ—à–µ —â–æ–¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π.")
            await save_candidate(update, context)
            return ConversationHandler.END
        else:
            await query.message.reply_text("–í —è–∫–æ–º—É –º—ñ—Å—Ç—ñ —Ç–∏ –ø–ª–∞–Ω—É—î—à –∂–∏—Ç–∏?")
            return CITY

    elif data.startswith('relocation_'):
        relocation = '–¢–ê–ö' if data.endswith('TAK') else '–ù–Ü'
        context.user_data['relocation'] = relocation
        await query.message.reply_text(f"–ì–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –¥–æ –ø–µ—Ä–µ—ó–∑–¥—É: {relocation}")
        await save_candidate(update, context)
        await query.message.reply_text("–î—è–∫—É—é! –ü—ñ–¥–±–∏—Ä–∞—é –≤–∞–∫–∞–Ω—Å—ñ—ó...")
        await send_matching_offers(update, context)
        return ConversationHandler.END

async def get_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['city'] = update.message.text.strip().title()
    await update.message.reply_text("–ß–∏ –≥–æ—Ç–æ–≤—ñ –≤–∏ –Ω–∞ –ø–µ—Ä–µ—ó–∑–¥?", reply_markup=InlineKeyboardMarkup(relocation_keyboard))
    return RELOCATION

from datetime import datetime
from zoneinfo import ZoneInfo  # python 3.9+

async def save_candidate(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    now = datetime.now(ZoneInfo("Europe/Warsaw")).strftime("%Y-%m-%d %H:%M:%S")

    row = [now, data.get("name"), data.get("age"), data.get("phone"), data.get("gender"),
           data.get("location"), data.get("city", ""), data.get("relocation", ""), "–ù–æ–≤–∏–π", ""]
    worksheet_candidates.append_row(row)

async def send_matching_offers(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update_or_query.effective_chat.id

    user_city = context.user_data.get('city', '').lower()
    willing_to_relocate = context.user_data.get('relocation', '').upper() == '–¢–ê–ö'
    user_age = context.user_data.get('age', '')
    user_gender = context.user_data.get('gender', '').lower()

    # Fetch all records first
    offers = worksheet_offers.get_all_records()

    # Now filter if you need to based on a condition
    filtered_offers = [offer for offer in offers if offer.get('Status') == '–ê–∫—Ç—É–∞–ª—å–Ω–æ']

    def age_in_range(age_text, user_age):
        if not age_text or not user_age:
            return True
        try:
            c_min, c_max = map(int, age_text.split('-'))
            return c_min <= int(user_age) <= c_max
        except:
            return True

    matching_offers = [
        offer for offer in offers
        if (offer.get('–ú—ñ—Å—Ç–æ', '').lower() == user_city or willing_to_relocate)
        and (offer.get('–°—Ç–∞—Ç—å', '').strip().lower() in [user_gender, '–≤—Å—ñ', ''])
        and age_in_range(offer.get('–í—ñ–∫', ''), user_age)
        and (offer.get('–°—Ç–∞—Ç—É—Å') == '–ê–∫—Ç—É–∞–ª—å–Ω–æ')
    ]

    context.user_data['matching_offers'] = matching_offers[:10]

    if matching_offers:
        await context.bot.send_message(chat_id=chat_id, text="üîé –û—Å—å –¥–µ–∫—ñ–ª—å–∫–∞ –≤–∞–∫–∞–Ω—Å—ñ–π –¥–ª—è —Ç–µ–±–µ:")
        for idx, offer in enumerate(matching_offers[:10]):
            text = f"üìå *{offer.get('–ù–∞–∑–≤–∞')}*\n{offer.get('–û–ø–∏—Å')}\n–ú—ñ—Å—Ç–æ: {offer.get('–ú—ñ—Å—Ç–æ')}"
            keyboard = InlineKeyboardMarkup(
                [[InlineKeyboardButton("–¶—ñ–∫–∞–≤–∏—Ç—å", callback_data=f"interested_{idx}")]]
            )
            await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=keyboard, parse_mode='Markdown')
    else:
        await context.bot.send_message(chat_id=chat_id, text="–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π.")

async def handle_interest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    offer_index = int(query.data.replace("interested_", ""))
    selected_offer = context.user_data.get("matching_offers", [])[offer_index]
    offer_name = selected_offer.get('–ù–∞–∑–≤–∞', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
    try:
        phone = context.user_data.get("phone")
        cell = worksheet_candidates.find(phone)
        if cell:
            worksheet_candidates.update_cell(cell.row, 10, f"–¶—ñ–∫–∞–≤–∏—Ç—å: {offer_name}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–µ—Å—É: {e}")
    await query.message.reply_text(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ! –¢–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å: {offer_name}")
    await query.message.reply_text("–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π –¥–æ –º–µ–Ω–µ –∑–∞ –Ω–æ–º–µ—Ä–æ–º üìû  +48 666 740 852.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–†–æ–∑–º–æ–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.CONTACT | (filters.TEXT & ~filters.COMMAND), get_phone)],
            AGE: [CallbackQueryHandler(process_callback, pattern='^age_')],
            GENDER: [CallbackQueryHandler(process_callback, pattern='^gender_')],
            LOCATION: [CallbackQueryHandler(process_callback, pattern='^location_')],
            ARRIVAL_TIME: [CallbackQueryHandler(process_callback, pattern='^arrival_')],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_city)],
            RELOCATION: [CallbackQueryHandler(process_callback, pattern='^relocation_')],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(handle_interest, pattern='^interested_'))

    print("Bot started...")
    app.run_polling()

if __name__ == '__main__':
 keep_alive()
 main()

